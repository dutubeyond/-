# -*- coding:utf-8 -*-

# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None



class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        preList=ListNode(0)
        curList=preList
        jin=0
        while l1 or l2 or jin:
            jin,cur=divmod((jin+(l1.val if l1 else 0)+(l2.val if l2 else 0)),10)
            curList.next=ListNode(cur)
            curList=curList.next
            l1=l1.next if l1 else None
            l2=l2.next if l2 else None
        return preList.next


def generateList(l: list) -> ListNode:
    prenode = ListNode(0)
    lastnode = prenode
    for val in l:
        lastnode.next = ListNode(val)
        lastnode = lastnode.next
    return prenode.next

def printList(l: ListNode):
    while l:
        print("%d, " %(l.val), end = '')
        l = l.next
    print('')

if __name__ == "__main__":
    l1 = generateList([2, 4, 3])
    l2 = generateList([5, 6, 4])
    printList(l1)
    printList(l2)
    s = Solution()
    sum = s.addTwoNumbers(l1, l2)
    printList(sum)
    
#ss=1+None  TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'
#lastnode = prenode   指向同一个地址
#lastnode.next=cur  #AttributeError: 'int' object has no attribute 'next'
#jin,cur=divmod((jin+l1.val if l1 else 0+l2.val if l2 else 0),10)    l1.val if l1 else 0 要加括号
